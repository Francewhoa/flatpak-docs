# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, 2018, Flatpak Team. Licensed under Creative Commons
# Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flatpak \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 16:26-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../python.rst:2
msgid "Python"
msgstr ""

#: ../../python.rst:4
msgid ""
"Python applications that use supported build systems like Meson, CMake, "
"or Autotools can be built using the standard method. However, many Python"
" applications use custom install scripts or are expected to be installed "
"through Setuptools and ``pip``."
msgstr ""

#: ../../python.rst:9
msgid ""
"For these cases, ``flatpak-builder`` provides the ``simple`` buildsystem."
" Rather than automating the build process, ``simple`` accepts a ``build-"
"commands`` array of strings, which are executed in sequence."
msgstr ""

#: ../../python.rst:13
msgid ""
"For example, the following YAML makes building the popular requests "
"module rather straightforward:"
msgstr ""

#: ../../python.rst:27
msgid ""
"Here, ``build-commands`` is an array containing the commands required to "
"build and install the module. As can be seen, in this case ``pip`` is run"
" to do this. Here, the ``--prefix=/app`` option is important, because "
"otherwise ``pip`` would try to install the module under ``/usr/`` which, "
"because ``/usr/`` is mounted read-only inside the sandbox, would fail."
msgstr ""

#: ../../python.rst:33
msgid ""
"Note that ``--no-deps`` is only used for the purpose of the example - "
"since the requests module has its own dependencies, the build would fail."
" If multiple dependencies are required, it is better to install them "
"using the method in the next section, instead."
msgstr ""

#: ../../python.rst:39
msgid "Building multiple Python dependencies"
msgstr ""

#: ../../python.rst:41
msgid ""
"Even though the example above installs, it won't actually work. This is "
"because the requests module has a number of dependencies that haven't "
"been installed:"
msgstr ""

#: ../../python.rst:44
msgid "certifi"
msgstr ""

#: ../../python.rst:45
msgid "chardet"
msgstr ""

#: ../../python.rst:46
msgid "idna"
msgstr ""

#: ../../python.rst:47
msgid "urllib3"
msgstr ""

#: ../../python.rst:49
msgid ""
"Four dependencies aren't very many, and could be installed using the "
"``simple`` method described above. However, anything more complex than "
"this would quickly become tedious."
msgstr ""

#: ../../python.rst:53
msgid ""
"For these cases, `flatpak-pip-generator <https://github.com/flatpak"
"/flatpak-builder-tools/tree/master/pip>`_ can be used to generate the "
"necessary manifest JSON. This is a Python script that takes a package "
"name and uses ``pip`` to identify its dependencies, along with their "
"tarball URLs and hashes."
msgstr ""

#: ../../python.rst:59
msgid "Using ``flatpak-pip-generator`` is as simple as running::"
msgstr ""

#: ../../python.rst:63
msgid ""
"Or if you have a ``requirements.txt`` file you can generate modules for "
"every listed package::"
msgstr ""

#: ../../python.rst:68
msgid ""
"This will output a file called ``python3-requests.json``, containing the "
"necessary manifest JSON, which can then be included in your application's"
" manifest file. Even if your manifest uses YAML, you can still include "
"JSON like this::"
msgstr ""

#~ msgid "Building multiple python dependencies"
#~ msgstr ""

